<h1>Chat</h1>

<!-- Contenedor de mensajes -->
<div id="chat-container">
  {{#each messages}}
    <div class="message">
      <span class="user">{{this.user}}</span>: {{this.message}}
    </div>
  {{/each}}
</div>

<!-- Formulario de envío de mensaje -->
<form id="message-form">
  <input type="text" name="user" id="user" placeholder="Your Name" required>
  <input type="text" name="message" id="message" placeholder="Your Message" required>
  <button type="submit">Send</button>
</form>

<!-- Script para manejar el chat en tiempo real -->
<script>
  // Establecer la conexión del socket
  const socket = io();

  // Obtener el contenedor del chat y el formulario de mensaje desde el DOM
  const chatContainer = document.getElementById('chat-container');
  const messageForm = document.getElementById('message-form');

  // Escuchar eventos de mensajes generales desde el servidor
  socket.on('mensajeGeneral', (data) => {
    // Crear un nuevo elemento de mensaje
    const newMessage = document.createElement('div');
    newMessage.classList.add('message'); // Agregar clase CSS para estilización
    newMessage.innerHTML = `<span class="user">${data.user}</span>: ${data.message}`; // Mostrar el nombre de usuario y el mensaje
    chatContainer.appendChild(newMessage); // Agregar el mensaje al contenedor del chat
  });

  // Escuchar el evento de envío de formulario
  messageForm.addEventListener('submit', (event) => {
    event.preventDefault(); // Prevenir el comportamiento predeterminado del formulario
    const formData = new FormData(messageForm); // Obtener los datos del formulario
    const user = formData.get('user'); // Obtener el nombre de usuario
    const message = formData.get('message'); // Obtener el mensaje

    // Crear un objeto para el nuevo mensaje
    const newMessage = {
      user,
      message,
    };

    // Emitir el evento 'new-message' al servidor con el nuevo mensaje
    socket.emit('new-message', newMessage);

    // Enviar el nuevo mensaje al servidor para almacenamiento en MongoDB
    fetch('/api/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newMessage),
    });

    messageForm.reset(); // Restablecer el formulario después del envío
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="socket.io/socket.io.js"></script>
<script src="/js/home.js"></script>

